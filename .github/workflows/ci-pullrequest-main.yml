name: DMR CI Pipeline

on:
  pull_request:
    branches: [ main ]
    
env:
  Bot1Url: "http://localhost:9012"
  CentOpsUrl: "http://localhost:9014"
  CentOpsApiKey: "testingadmin"

jobs:
  BuildUnitTest:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        
    - name: Dotnet Restore Tools
      run: dotnet tool restore --tool-manifest "src/.config/dotnet-tools.json"
        
    - name: Dotnet Restore
      run: dotnet restore src/*.sln
        
    - name: Dotnet Format
      run: dotnet format src/*.sln --no-restore --verify-no-changes
      
    - name: Dotnet Build
      run: dotnet build src/*.sln --no-restore
      
    - name: Dotnet Publish
      working-directory: src
      run: dotnet publish *.sln --no-restore
     
    - name: Dotnet Test (unit tests only)
      run: dotnet test src/*.UnitTests/*.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Copy Coverage output to root
      run: cp src/*.UnitTests/TestResults/**/coverage.cobertura.xml coverage.cobertura.xml
      
    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@5088d5eb315a46ff785c607078606c0b9107e0b6
      with:
        filename: coverage.cobertura.xml
        fail_below_min: true
        format: markdown
        output: both
        thresholds: '80'
    
    - name: Upload Coverage Markdown Report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: coverage-report-markdown
        path: code-coverage-results.md
        
    - name: Upload Coverage XML Report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: coverage-report-xml
        path: coverage.cobertura.xml
        
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
  
    - name: Mutation Test
      working-directory: src
      run: dotnet stryker
    
    - name: Upload Mutation Report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: mutation-report
        path: src/StrykerOutput
        
  IntegrationTest:
    runs-on: ubuntu-latest   
    needs: BuildUnitTest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        
    - name: Checkout Test repo
      uses: actions/checkout@v3
      with:
        repository: buerokratt/Tests
        path: Tests
        
    - name: Checkout Mock Classifier repo
      uses: actions/checkout@v3
      with:
        repository: buerokratt/Mock-Classifier
        path: Mock-Classifier
        
    - name: Checkout Mock Bot repo
      uses: actions/checkout@v3
      with:
        repository: buerokratt/Mock-Bot
        path: Mock-Bot
        
    - name: Checkout CentOps repo
      uses: actions/checkout@v3
      with:
        repository: buerokratt/CentOps
        path: CentOps
      
    - name: Create Docker network bridge
      run: docker network create -d bridge my-network
      
    - name: Run Docker Compose Up to start containers
      run: docker compose --file Tests/docker-compose.yml up --build --detach

    - name: Restore dependencies for Test repo
      run: dotnet restore Tests/src/Tests.IntegrationTests/*.csproj
      
    - name: Build Test repo
      run: dotnet build Tests/src/Tests.IntegrationTests/*.csproj --no-restore
       
    - name: Test Test repo
      run: dotnet test Tests/src/Tests.IntegrationTests/*.csproj --no-build
      
    - name: Dump Docker Logs
      if: always()
      uses: jwalton/gh-docker-logs@a8cb5301950dd4d2b86619cd487b3b281526b178
      
    - name: Run Docker Compose Down to stop containers
      if: always()
      run: docker compose --file Tests/docker-compose.yml down

  PackageDeploy:
    runs-on: ubuntu-latest
    needs: IntegrationTest

    steps:
    - uses: actions/checkout@v3
    
    - name: Docker Setup BuildX
      uses: docker/setup-buildx-action@v2
    
    - name: Docker Build
      run: docker image build src/Dmr.Api/ -t dmr

    - name: Scan for vulnerabilities
      uses: crazy-max/ghaction-container-scan@b5dc796ae2a0ab4338f6db67dd1041a1cf261c2c
      with:
        image: dmr
        annotations: true
